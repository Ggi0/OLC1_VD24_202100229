
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.HashMap;
import patronInterprete.abstracto.Instruccion;
import patronInterprete.simbolo.*;
import patronInterprete.expresiones.Nativo;
import patronInterprete.instrucciones.Imprimir;
import patronInterprete.instrucciones.Declaracion;
import patronInterprete.instrucciones.AccesoVar;
import patronInterprete.instrucciones.AsignacionVar;
import patronInterprete.instrucciones.Casteo;
import patronInterprete.instrucciones.If_stcControl;
import patronInterprete.instrucciones.IfElse_stcControl;
import patronInterprete.instrucciones.ElseIf_stcControl;
import patronInterprete.instrucciones.Match_stc;
import patronInterprete.instrucciones.Caso;
import patronInterprete.instrucciones.For_ciclos;
import patronInterprete.instrucciones.While_ciclos;
import patronInterprete.instrucciones.DoWhile_ciclos;
import patronInterprete.instrucciones.Break_stc;
import patronInterprete.instrucciones.Continuar;
import patronInterprete.instrucciones.Incremento;
import patronInterprete.instrucciones.Decremento;
import patronInterprete.expresiones.Suma;
import patronInterprete.expresiones.Resta;
import patronInterprete.expresiones.NegacionUnaria;
import patronInterprete.expresiones.Multiplicacion;
import patronInterprete.expresiones.Division;
import patronInterprete.expresiones.Potencia;
import patronInterprete.expresiones.Raiz;
import patronInterprete.expresiones.Modulo;
import patronInterprete.expresiones.Equals;
import patronInterprete.expresiones.Diferencia;
import patronInterprete.expresiones.Menor;
import patronInterprete.expresiones.Mayor;
import patronInterprete.expresiones.MenorIgual;
import patronInterprete.expresiones.MayorIgual;
import patronInterprete.expresiones.OR_logico;
import patronInterprete.expresiones.AND_logico;
import patronInterprete.expresiones.NOT_logico;
import patronInterprete.excepciones.Errores;
import patronInterprete.instrucciones.vectores.DeclaracionV1;
import patronInterprete.instrucciones.vectores.AccesoV1;
import patronInterprete.instrucciones.vectores.AsignacionV1;
import patronInterprete.instrucciones.vectores.DeclaracionV2;
import patronInterprete.instrucciones.vectores.AccesoV2;
import patronInterprete.instrucciones.vectores.AsignacionV2;
import patronInterprete.instrucciones.Listas.DeclaracionLista;
import patronInterprete.instrucciones.Listas.AppendList;
import patronInterprete.instrucciones.Listas.AccesoLista;
import patronInterprete.instrucciones.Listas.AsignacionLista;
import patronInterprete.instrucciones.Listas.RemoveLista;
import patronInterprete.instrucciones.Listas.PopListas;
import patronInterprete.instrucciones.Listas.ReverseLista;
import patronInterprete.instrucciones.Metodo;
import patronInterprete.instrucciones.Run_Main;
import patronInterprete.instrucciones.Llamada;
import patronInterprete.instrucciones.Llamada;
import patronInterprete.instrucciones.LlamadaFuncion;
import patronInterprete.instrucciones.Return_stc;
import patronInterprete.instrucciones.Built_in_methodos.Round;
import patronInterprete.instrucciones.Built_in_methodos.Length_func;
import patronInterprete.instrucciones.Built_in_methodos.ToString_func;
import patronInterprete.instrucciones.Structs_func.DeclaracionStructs;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\221\000\002\002\004\000\002\004\003\000\002\002" +
    "\004\000\002\002\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\005\004\000\002\005\003\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\007\006\000\002\010\006\000\002\010\010\000\002\011" +
    "\005\000\002\011\004\000\002\011\004\000\002\012\010" +
    "\000\002\013\006\000\002\014\006\000\002\014\011\000" +
    "\002\015\006\000\002\016\011\000\002\016\015\000\002" +
    "\016\013\000\002\017\015\000\002\020\011\000\002\021" +
    "\012\000\002\025\011\000\002\025\010\000\002\030\003" +
    "\000\002\030\004\000\002\030\003\000\002\031\004\000" +
    "\002\031\003\000\002\026\007\000\002\027\007\000\002" +
    "\033\010\000\002\033\014\000\002\037\012\000\002\037" +
    "\016\000\002\042\007\000\002\042\005\000\002\036\005" +
    "\000\002\036\003\000\002\034\006\000\002\035\010\000" +
    "\002\040\011\000\002\041\013\000\002\043\011\000\002" +
    "\044\010\000\002\045\010\000\002\046\012\000\002\047" +
    "\010\000\002\050\007\000\002\051\007\000\002\064\007" +
    "\000\002\062\004\000\002\062\003\000\002\063\006\000" +
    "\002\063\006\000\002\023\003\000\002\024\003\000\002" +
    "\061\004\000\002\061\003\000\002\052\012\000\002\052" +
    "\011\000\002\053\005\000\002\053\003\000\002\055\007" +
    "\000\002\055\005\000\002\056\007\000\002\056\006\000" +
    "\002\054\007\000\002\054\005\000\002\057\006\000\002" +
    "\057\005\000\002\022\004\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\004\000\002\022" +
    "\005\000\002\022\005\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\005\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0161\000\026\010\014\011\023\036\011\037\031\040" +
    "\026\041\007\042\021\062\010\107\022\110\015\001\002" +
    "\000\004\013\u0163\001\002\000\030\002\000\010\014\011" +
    "\023\036\011\037\031\040\026\041\007\042\021\062\010" +
    "\107\022\110\015\001\002\000\004\010\303\001\002\000" +
    "\020\010\uff73\013\uff73\015\uff73\021\uff73\023\uff73\075\uff73" +
    "\102\uff73\001\002\000\004\010\267\001\002\000\020\010" +
    "\uff76\013\uff76\015\uff76\021\uff76\023\uff76\075\uff76\102\uff76" +
    "\001\002\000\004\013\266\001\002\000\004\013\265\001" +
    "\002\000\004\021\255\001\002\000\004\010\250\001\002" +
    "\000\030\002\ufffc\010\ufffc\011\ufffc\036\ufffc\037\ufffc\040" +
    "\ufffc\041\ufffc\042\ufffc\062\ufffc\107\ufffc\110\ufffc\001\002" +
    "\000\004\013\247\001\002\000\030\002\ufffe\010\ufffe\011" +
    "\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\062\ufffe" +
    "\107\ufffe\110\ufffe\001\002\000\020\010\uff72\013\uff72\015" +
    "\uff72\021\uff72\023\uff72\075\uff72\102\uff72\001\002\000\020" +
    "\010\uff71\013\uff71\015\uff71\021\uff71\023\uff71\075\uff71\102" +
    "\uff71\001\002\000\004\010\036\001\002\000\004\013\035" +
    "\001\002\000\004\013\034\001\002\000\020\010\uff74\013" +
    "\uff74\015\uff74\021\uff74\023\uff74\075\uff74\102\uff74\001\002" +
    "\000\004\002\033\001\002\000\004\013\032\001\002\000" +
    "\020\010\uff75\013\uff75\015\uff75\021\uff75\023\uff75\075\uff75" +
    "\102\uff75\001\002\000\030\002\ufffb\010\ufffb\011\ufffb\036" +
    "\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\062\ufffb\107\ufffb" +
    "\110\ufffb\001\002\000\004\002\001\001\002\000\030\002" +
    "\ufffd\010\ufffd\011\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd" +
    "\042\ufffd\062\ufffd\107\ufffd\110\ufffd\001\002\000\030\002" +
    "\ufff8\010\ufff8\011\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8" +
    "\042\ufff8\062\ufff8\107\ufff8\110\ufff8\001\002\000\004\012" +
    "\037\001\002\000\020\024\041\036\011\037\031\040\026" +
    "\041\007\042\021\107\022\001\002\000\010\013\uffda\021" +
    "\045\075\046\001\002\000\004\100\042\001\002\000\016" +
    "\036\011\037\031\040\026\041\007\042\021\107\022\001" +
    "\002\000\004\102\044\001\002\000\004\013\uffb5\001\002" +
    "\000\004\022\222\001\002\000\036\004\051\005\073\006" +
    "\053\007\065\010\061\014\057\034\056\035\071\055\062" +
    "\057\063\060\070\061\055\066\047\106\054\001\002\000" +
    "\036\004\051\005\073\006\053\007\065\010\061\014\057" +
    "\034\056\035\071\055\062\057\063\060\070\061\055\066" +
    "\047\106\054\001\002\000\056\013\uff7b\015\uff7b\020\uff7b" +
    "\022\uff7b\023\uff7b\051\uff7b\056\uff7b\065\uff7b\066\uff7b\070" +
    "\uff7b\071\uff7b\072\uff7b\073\uff7b\074\uff7b\076\uff7b\077\uff7b" +
    "\100\uff7b\101\uff7b\102\uff7b\103\uff7b\104\uff7b\105\uff7b\001" +
    "\002\000\056\013\uff87\015\uff87\020\uff87\022\uff87\023\uff87" +
    "\051\uff87\056\uff87\065\uff87\066\uff87\070\uff87\071\uff87\072" +
    "\uff87\073\uff87\074\uff87\076\uff87\077\uff87\100\uff87\101\uff87" +
    "\102\uff87\103\uff87\104\uff87\105\uff87\001\002\000\056\013" +
    "\uff7e\015\uff7e\020\uff7e\022\uff7e\023\uff7e\051\uff7e\056\uff7e" +
    "\065\uff7e\066\uff7e\070\uff7e\071\uff7e\072\uff7e\073\uff7e\074" +
    "\uff7e\076\uff7e\077\uff7e\100\uff7e\101\uff7e\102\uff7e\103\uff7e" +
    "\104\uff7e\105\uff7e\001\002\000\056\013\uff85\015\uff85\020" +
    "\uff85\022\uff85\023\uff85\051\uff85\056\uff85\065\uff85\066\uff85" +
    "\070\uff85\071\uff85\072\uff85\073\uff85\074\uff85\076\uff85\077" +
    "\uff85\100\uff85\101\uff85\102\uff85\103\uff85\104\uff85\105\uff85" +
    "\001\002\000\036\004\051\005\073\006\053\007\065\010" +
    "\061\014\057\034\056\035\071\055\062\057\063\060\070" +
    "\061\055\066\047\106\054\001\002\000\004\014\215\001" +
    "\002\000\056\013\uff84\015\uff84\020\uff84\022\uff84\023\uff84" +
    "\051\uff84\056\uff84\065\uff84\066\uff84\070\uff84\071\uff84\072" +
    "\uff84\073\uff84\074\uff84\076\uff84\077\uff84\100\uff84\101\uff84" +
    "\102\uff84\103\uff84\104\uff84\105\uff84\001\002\000\036\004" +
    "\051\005\073\006\053\007\065\010\061\014\057\034\056" +
    "\035\071\055\062\057\063\060\070\061\055\066\047\106" +
    "\054\001\002\000\056\013\uff7f\015\uff7f\020\uff7f\022\uff7f" +
    "\023\uff7f\051\uff7f\056\uff7f\065\uff7f\066\uff7f\070\uff7f\071" +
    "\uff7f\072\uff7f\073\uff7f\074\uff7f\076\uff7f\077\uff7f\100\uff7f" +
    "\101\uff7f\102\uff7f\103\uff7f\104\uff7f\105\uff7f\001\002\000" +
    "\064\013\uff82\014\144\015\uff82\016\145\020\uff82\021\142" +
    "\022\uff82\023\uff82\051\uff82\056\uff82\065\uff82\066\uff82\070" +
    "\uff82\071\uff82\072\uff82\073\uff82\074\uff82\076\uff82\077\uff82" +
    "\100\uff82\101\uff82\102\uff82\103\uff82\104\uff82\105\uff82\001" +
    "\002\000\004\014\206\001\002\000\004\014\203\001\002" +
    "\000\056\013\uff7a\015\uff7a\020\uff7a\022\uff7a\023\uff7a\051" +
    "\uff7a\056\uff7a\065\uff7a\066\uff7a\070\uff7a\071\uff7a\072\uff7a" +
    "\073\uff7a\074\uff7a\076\uff7a\077\uff7a\100\uff7a\101\uff7a\102" +
    "\uff7a\103\uff7a\104\uff7a\105\uff7a\001\002\000\056\013\uff86" +
    "\015\uff86\020\uff86\022\uff86\023\uff86\051\uff86\056\uff86\065" +
    "\uff86\066\uff86\070\uff86\071\uff86\072\uff86\073\uff86\074\uff86" +
    "\076\uff86\077\uff86\100\uff86\101\uff86\102\uff86\103\uff86\104" +
    "\uff86\105\uff86\001\002\000\056\013\uff79\015\uff79\020\uff79" +
    "\022\uff79\023\uff79\051\uff79\056\uff79\065\uff79\066\uff79\070" +
    "\uff79\071\uff79\072\uff79\073\uff79\074\uff79\076\uff79\077\uff79" +
    "\100\uff79\101\uff79\102\uff79\103\uff79\104\uff79\105\uff79\001" +
    "\002\000\042\013\uffd9\065\114\066\105\070\110\071\116" +
    "\072\106\073\113\074\117\076\121\077\104\100\107\101" +
    "\111\102\115\103\112\104\122\105\103\001\002\000\004" +
    "\014\100\001\002\000\056\013\uff83\015\uff83\020\uff83\022" +
    "\uff83\023\uff83\051\uff83\056\uff83\065\uff83\066\uff83\070\uff83" +
    "\071\uff83\072\uff83\073\uff83\074\uff83\076\uff83\077\uff83\100" +
    "\uff83\101\uff83\102\uff83\103\uff83\104\uff83\105\uff83\001\002" +
    "\000\056\013\uff7d\015\uff7d\020\uff7d\022\uff7d\023\uff7d\051" +
    "\uff7d\056\uff7d\065\uff7d\066\uff7d\070\uff7d\071\uff7d\072\uff7d" +
    "\073\uff7d\074\uff7d\076\uff7d\077\uff7d\100\uff7d\101\uff7d\102" +
    "\uff7d\103\uff7d\104\uff7d\105\uff7d\001\002\000\056\013\uff88" +
    "\015\uff88\020\uff88\022\uff88\023\uff88\051\uff88\056\uff88\065" +
    "\uff88\066\uff88\070\uff88\071\uff88\072\uff88\073\uff88\074\uff88" +
    "\076\uff88\077\uff88\100\uff88\101\uff88\102\uff88\103\uff88\104" +
    "\uff88\105\uff88\001\002\000\056\013\uff80\015\uff80\020\uff80" +
    "\022\uff80\023\uff80\051\uff80\056\uff80\065\uff80\066\uff80\070" +
    "\uff80\071\uff80\072\uff80\073\uff80\074\uff80\076\uff80\077\uff80" +
    "\100\uff80\101\uff80\102\uff80\103\uff80\104\uff80\105\uff80\001" +
    "\002\000\056\013\uff78\015\uff78\020\uff78\022\uff78\023\uff78" +
    "\051\uff78\056\uff78\065\uff78\066\uff78\070\uff78\071\uff78\072" +
    "\uff78\073\uff78\074\uff78\076\uff78\077\uff78\100\uff78\101\uff78" +
    "\102\uff78\103\uff78\104\uff78\105\uff78\001\002\000\056\013" +
    "\uff7c\015\uff7c\020\uff7c\022\uff7c\023\uff7c\051\uff7c\056\uff7c" +
    "\065\uff7c\066\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c\074" +
    "\uff7c\076\uff7c\077\uff7c\100\uff7c\101\uff7c\102\uff7c\103\uff7c" +
    "\104\uff7c\105\uff7c\001\002\000\056\013\uff81\015\uff81\020" +
    "\uff81\022\uff81\023\uff81\051\uff81\056\uff81\065\uff81\066\uff81" +
    "\070\uff81\071\uff81\072\uff81\073\uff81\074\uff81\076\uff81\077" +
    "\uff81\100\uff81\101\uff81\102\uff81\103\uff81\104\uff81\105\uff81" +
    "\001\002\000\036\004\051\005\073\006\053\007\065\010" +
    "\101\014\057\034\056\035\071\055\062\057\063\060\070" +
    "\061\055\066\047\106\054\001\002\000\052\014\144\015" +
    "\uff82\016\145\017\143\021\142\065\uff82\066\uff82\070\uff82" +
    "\071\uff82\072\uff82\073\uff82\074\uff82\076\uff82\077\uff82\100" +
    "\uff82\101\uff82\102\uff82\103\uff82\104\uff82\105\uff82\001\002" +
    "\000\042\015\120\065\114\066\105\070\110\071\116\072" +
    "\106\073\113\074\117\076\121\077\104\100\107\101\111" +
    "\102\115\103\112\104\122\105\103\001\002\000\036\004" +
    "\051\005\073\006\053\007\065\010\061\014\057\034\056" +
    "\035\071\055\062\057\063\060\070\061\055\066\047\106" +
    "\054\001\002\000\036\004\051\005\073\006\053\007\065" +
    "\010\061\014\057\034\056\035\071\055\062\057\063\060" +
    "\070\061\055\066\047\106\054\001\002\000\036\004\051" +
    "\005\073\006\053\007\065\010\061\014\057\034\056\035" +
    "\071\055\062\057\063\060\070\061\055\066\047\106\054" +
    "\001\002\000\036\004\051\005\073\006\053\007\065\010" +
    "\061\014\057\034\056\035\071\055\062\057\063\060\070" +
    "\061\055\066\047\106\054\001\002\000\036\004\051\005" +
    "\073\006\053\007\065\010\061\014\057\034\056\035\071" +
    "\055\062\057\063\060\070\061\055\066\047\106\054\001" +
    "\002\000\036\004\051\005\073\006\053\007\065\010\061" +
    "\014\057\034\056\035\071\055\062\057\063\060\070\061" +
    "\055\066\047\106\054\001\002\000\036\004\051\005\073" +
    "\006\053\007\065\010\061\014\057\034\056\035\071\055" +
    "\062\057\063\060\070\061\055\066\047\106\054\001\002" +
    "\000\036\004\051\005\073\006\053\007\065\010\061\014" +
    "\057\034\056\035\071\055\062\057\063\060\070\061\055" +
    "\066\047\106\054\001\002\000\036\004\051\005\073\006" +
    "\053\007\065\010\061\014\057\034\056\035\071\055\062" +
    "\057\063\060\070\061\055\066\047\106\054\001\002\000" +
    "\036\004\051\005\073\006\053\007\065\010\061\014\057" +
    "\034\056\035\071\055\062\057\063\060\070\061\055\066" +
    "\047\106\054\001\002\000\036\004\051\005\073\006\053" +
    "\007\065\010\061\014\057\034\056\035\071\055\062\057" +
    "\063\060\070\061\055\066\047\106\054\001\002\000\036" +
    "\004\051\005\073\006\053\007\065\010\061\014\057\034" +
    "\056\035\071\055\062\057\063\060\070\061\055\066\047" +
    "\106\054\001\002\000\036\004\051\005\073\006\053\007" +
    "\065\010\061\014\057\034\056\035\071\055\062\057\063" +
    "\060\070\061\055\066\047\106\054\001\002\000\056\013" +
    "\uffd3\015\uffd3\020\uffd3\022\uffd3\023\uffd3\051\uffd3\056\uffd3" +
    "\065\uffd3\066\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074" +
    "\uffd3\076\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3\103\uffd3" +
    "\104\uffd3\105\uffd3\001\002\000\036\004\051\005\073\006" +
    "\053\007\065\010\061\014\057\034\056\035\071\055\062" +
    "\057\063\060\070\061\055\066\047\106\054\001\002\000" +
    "\036\004\051\005\073\006\053\007\065\010\061\014\057" +
    "\034\056\035\071\055\062\057\063\060\070\061\055\066" +
    "\047\106\054\001\002\000\056\013\uff89\015\uff89\020\uff89" +
    "\022\uff89\023\uff89\051\uff89\056\uff89\065\114\066\105\070" +
    "\110\071\116\072\106\073\113\074\117\076\121\077\104" +
    "\100\107\101\111\102\115\103\112\104\uff89\105\103\001" +
    "\002\000\056\013\uff91\015\uff91\020\uff91\022\uff91\023\uff91" +
    "\051\uff91\056\uff91\065\114\066\105\070\110\071\116\072" +
    "\106\073\113\074\117\076\uff91\077\uff91\100\uff91\101\uff91" +
    "\102\uff91\103\uff91\104\uff91\105\uff91\001\002\000\056\013" +
    "\uff94\015\uff94\020\uff94\022\uff94\023\uff94\051\uff94\056\uff94" +
    "\065\uff94\066\uff94\070\uff94\071\uff94\072\106\073\113\074" +
    "\uff94\076\uff94\077\uff94\100\uff94\101\uff94\102\uff94\103\uff94" +
    "\104\uff94\105\uff94\001\002\000\056\013\uff95\015\uff95\020" +
    "\uff95\022\uff95\023\uff95\051\uff95\056\uff95\065\uff95\066\uff95" +
    "\070\uff95\071\uff95\072\106\073\113\074\uff95\076\uff95\077" +
    "\uff95\100\uff95\101\uff95\102\uff95\103\uff95\104\uff95\105\uff95" +
    "\001\002\000\056\013\uff8e\015\uff8e\020\uff8e\022\uff8e\023" +
    "\uff8e\051\uff8e\056\uff8e\065\114\066\105\070\110\071\116" +
    "\072\106\073\113\074\117\076\uff8e\077\uff8e\100\uff8e\101" +
    "\uff8e\102\uff8e\103\uff8e\104\uff8e\105\uff8e\001\002\000\056" +
    "\013\uff93\015\uff93\020\uff93\022\uff93\023\uff93\051\uff93\056" +
    "\uff93\065\uff93\066\uff93\070\110\071\116\072\106\073\113" +
    "\074\117\076\uff93\077\uff93\100\uff93\101\uff93\102\uff93\103" +
    "\uff93\104\uff93\105\uff93\001\002\000\052\013\uff97\015\uff97" +
    "\020\uff97\022\uff97\023\uff97\051\uff97\056\uff97\065\uff97\066" +
    "\uff97\070\uff97\071\uff97\074\uff97\076\uff97\077\uff97\100\uff97" +
    "\101\uff97\102\uff97\103\uff97\104\uff97\105\uff97\001\002\000" +
    "\056\013\uff8c\015\uff8c\020\uff8c\022\uff8c\023\uff8c\051\uff8c" +
    "\056\uff8c\065\114\066\105\070\110\071\116\072\106\073" +
    "\113\074\117\076\uff8c\077\uff8c\100\uff8c\101\uff8c\102\uff8c" +
    "\103\uff8c\104\uff8c\105\uff8c\001\002\000\056\013\uff8d\015" +
    "\uff8d\020\uff8d\022\uff8d\023\uff8d\051\uff8d\056\uff8d\065\114" +
    "\066\105\070\110\071\116\072\106\073\113\074\117\076" +
    "\uff8d\077\uff8d\100\uff8d\101\uff8d\102\uff8d\103\uff8d\104\uff8d" +
    "\105\uff8d\001\002\000\056\013\uff96\015\uff96\020\uff96\022" +
    "\uff96\023\uff96\051\uff96\056\uff96\065\uff96\066\uff96\070\uff96" +
    "\071\uff96\072\106\073\113\074\uff96\076\uff96\077\uff96\100" +
    "\uff96\101\uff96\102\uff96\103\uff96\104\uff96\105\uff96\001\002" +
    "\000\056\013\uff8f\015\uff8f\020\uff8f\022\uff8f\023\uff8f\051" +
    "\uff8f\056\uff8f\065\114\066\105\070\110\071\116\072\106" +
    "\073\113\074\117\076\uff8f\077\uff8f\100\uff8f\101\uff8f\102" +
    "\uff8f\103\uff8f\104\uff8f\105\uff8f\001\002\000\052\013\uff98" +
    "\015\uff98\020\uff98\022\uff98\023\uff98\051\uff98\056\uff98\065" +
    "\uff98\066\uff98\070\uff98\071\uff98\074\uff98\076\uff98\077\uff98" +
    "\100\uff98\101\uff98\102\uff98\103\uff98\104\uff98\105\uff98\001" +
    "\002\000\056\013\uff92\015\uff92\020\uff92\022\uff92\023\uff92" +
    "\051\uff92\056\uff92\065\uff92\066\uff92\070\110\071\116\072" +
    "\106\073\113\074\117\076\uff92\077\uff92\100\uff92\101\uff92" +
    "\102\uff92\103\uff92\104\uff92\105\uff92\001\002\000\056\013" +
    "\uff90\015\uff90\020\uff90\022\uff90\023\uff90\051\uff90\056\uff90" +
    "\065\114\066\105\070\110\071\116\072\106\073\113\074" +
    "\117\076\uff90\077\uff90\100\uff90\101\uff90\102\uff90\103\uff90" +
    "\104\uff90\105\uff90\001\002\000\056\013\uff8a\015\uff8a\020" +
    "\uff8a\022\uff8a\023\uff8a\051\uff8a\056\uff8a\065\114\066\105" +
    "\070\110\071\116\072\106\073\113\074\117\076\121\077" +
    "\104\100\107\101\111\102\115\103\112\104\uff8a\105\uff8a" +
    "\001\002\000\036\004\051\005\073\006\053\007\065\010" +
    "\061\014\057\034\056\035\071\055\062\057\063\060\070" +
    "\061\055\066\047\106\054\001\002\000\036\004\051\005" +
    "\073\006\053\007\065\010\061\014\057\034\056\035\071" +
    "\055\062\057\063\060\070\061\055\066\047\106\054\001" +
    "\002\000\006\010\161\015\162\001\002\000\010\026\146" +
    "\030\147\031\150\001\002\000\004\014\156\001\002\000" +
    "\004\014\153\001\002\000\004\014\151\001\002\000\004" +
    "\015\152\001\002\000\056\013\uffb0\015\uffb0\020\uffb0\022" +
    "\uffb0\023\uffb0\051\uffb0\056\uffb0\065\uffb0\066\uffb0\070\uffb0" +
    "\071\uffb0\072\uffb0\073\uffb0\074\uffb0\076\uffb0\077\uffb0\100" +
    "\uffb0\101\uffb0\102\uffb0\103\uffb0\104\uffb0\105\uffb0\001\002" +
    "\000\036\004\051\005\073\006\053\007\065\010\061\014" +
    "\057\034\056\035\071\055\062\057\063\060\070\061\055" +
    "\066\047\106\054\001\002\000\042\015\155\065\114\066" +
    "\105\070\110\071\116\072\106\073\113\074\117\076\121" +
    "\077\104\100\107\101\111\102\115\103\112\104\122\105" +
    "\103\001\002\000\056\013\uffb1\015\uffb1\020\uffb1\022\uffb1" +
    "\023\uffb1\051\uffb1\056\uffb1\065\uffb1\066\uffb1\070\uffb1\071" +
    "\uffb1\072\uffb1\073\uffb1\074\uffb1\076\uffb1\077\uffb1\100\uffb1" +
    "\101\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1\001\002\000" +
    "\036\004\051\005\073\006\053\007\065\010\061\014\057" +
    "\034\056\035\071\055\062\057\063\060\070\061\055\066" +
    "\047\106\054\001\002\000\042\015\160\065\114\066\105" +
    "\070\110\071\116\072\106\073\113\074\117\076\121\077" +
    "\104\100\107\101\111\102\115\103\112\104\122\105\103" +
    "\001\002\000\056\013\uffb3\015\uffb3\020\uffb3\022\uffb3\023" +
    "\uffb3\051\uffb3\056\uffb3\065\uffb3\066\uffb3\070\uffb3\071\uffb3" +
    "\072\uffb3\073\uffb3\074\uffb3\076\uffb3\077\uffb3\100\uffb3\101" +
    "\uffb3\102\uffb3\103\uffb3\104\uffb3\105\uffb3\001\002\000\004" +
    "\075\171\001\002\000\056\013\uff9a\015\uff9a\020\uff9a\022" +
    "\uff9a\023\uff9a\051\uff9a\056\uff9a\065\uff9a\066\uff9a\070\uff9a" +
    "\071\uff9a\072\uff9a\073\uff9a\074\uff9a\076\uff9a\077\uff9a\100" +
    "\uff9a\101\uff9a\102\uff9a\103\uff9a\104\uff9a\105\uff9a\001\002" +
    "\000\006\015\165\023\164\001\002\000\004\010\166\001" +
    "\002\000\056\013\uff9b\015\uff9b\020\uff9b\022\uff9b\023\uff9b" +
    "\051\uff9b\056\uff9b\065\uff9b\066\uff9b\070\uff9b\071\uff9b\072" +
    "\uff9b\073\uff9b\074\uff9b\076\uff9b\077\uff9b\100\uff9b\101\uff9b" +
    "\102\uff9b\103\uff9b\104\uff9b\105\uff9b\001\002\000\004\075" +
    "\167\001\002\000\036\004\051\005\073\006\053\007\065" +
    "\010\061\014\057\034\056\035\071\055\062\057\063\060" +
    "\070\061\055\066\047\106\054\001\002\000\044\015\uff9d" +
    "\023\uff9d\065\114\066\105\070\110\071\116\072\106\073" +
    "\113\074\117\076\121\077\104\100\107\101\111\102\115" +
    "\103\112\104\122\105\103\001\002\000\036\004\051\005" +
    "\073\006\053\007\065\010\061\014\057\034\056\035\071" +
    "\055\062\057\063\060\070\061\055\066\047\106\054\001" +
    "\002\000\044\015\uff9c\023\uff9c\065\114\066\105\070\110" +
    "\071\116\072\106\073\113\074\117\076\121\077\104\100" +
    "\107\101\111\102\115\103\112\104\122\105\103\001\002" +
    "\000\042\020\174\065\114\066\105\070\110\071\116\072" +
    "\106\073\113\074\117\076\121\077\104\100\107\101\111" +
    "\102\115\103\112\104\122\105\103\001\002\000\004\015" +
    "\175\001\002\000\056\013\uffd2\015\uffd2\020\uffd2\022\uffd2" +
    "\023\uffd2\051\uffd2\056\uffd2\065\uffd2\066\uffd2\070\uffd2\071" +
    "\uffd2\072\uffd2\073\uffd2\074\uffd2\076\uffd2\077\uffd2\100\uffd2" +
    "\101\uffd2\102\uffd2\103\uffd2\104\uffd2\105\uffd2\001\002\000" +
    "\042\022\177\065\114\066\105\070\110\071\116\072\106" +
    "\073\113\074\117\076\121\077\104\100\107\101\111\102" +
    "\115\103\112\104\122\105\103\001\002\000\060\013\uffb9" +
    "\015\uffb9\020\uffb9\021\200\022\uffb9\023\uffb9\051\uffb9\056" +
    "\uffb9\065\uffb9\066\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9" +
    "\074\uffb9\076\uffb9\077\uffb9\100\uffb9\101\uffb9\102\uffb9\103" +
    "\uffb9\104\uffb9\105\uffb9\001\002\000\036\004\051\005\073" +
    "\006\053\007\065\010\061\014\057\034\056\035\071\055" +
    "\062\057\063\060\070\061\055\066\047\106\054\001\002" +
    "\000\042\022\202\065\114\066\105\070\110\071\116\072" +
    "\106\073\113\074\117\076\121\077\104\100\107\101\111" +
    "\102\115\103\112\104\122\105\103\001\002\000\056\013" +
    "\uffb7\015\uffb7\020\uffb7\022\uffb7\023\uffb7\051\uffb7\056\uffb7" +
    "\065\uffb7\066\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074" +
    "\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7" +
    "\104\uffb7\105\uffb7\001\002\000\036\004\051\005\073\006" +
    "\053\007\065\010\061\014\057\034\056\035\071\055\062" +
    "\057\063\060\070\061\055\066\047\106\054\001\002\000" +
    "\042\015\205\065\114\066\105\070\110\071\116\072\106" +
    "\073\113\074\117\076\121\077\104\100\107\101\111\102" +
    "\115\103\112\104\122\105\103\001\002\000\056\013\uffd4" +
    "\015\uffd4\020\uffd4\022\uffd4\023\uffd4\051\uffd4\056\uffd4\065" +
    "\uffd4\066\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4" +
    "\076\uffd4\077\uffd4\100\uffd4\101\uffd4\102\uffd4\103\uffd4\104" +
    "\uffd4\105\uffd4\001\002\000\036\004\051\005\073\006\053" +
    "\007\065\010\061\014\057\034\056\035\071\055\062\057" +
    "\063\060\070\061\055\066\047\106\054\001\002\000\042" +
    "\056\210\065\114\066\105\070\110\071\116\072\106\073" +
    "\113\074\117\076\121\077\104\100\107\101\111\102\115" +
    "\103\112\104\122\105\103\001\002\000\016\036\011\037" +
    "\031\040\026\041\007\042\021\107\022\001\002\000\004" +
    "\015\212\001\002\000\056\013\uffd5\015\uffd5\020\uffd5\022" +
    "\uffd5\023\uffd5\051\uffd5\056\uffd5\065\uffd5\066\uffd5\070\uffd5" +
    "\071\uffd5\072\uffd5\073\uffd5\074\uffd5\076\uffd5\077\uffd5\100" +
    "\uffd5\101\uffd5\102\uffd5\103\uffd5\104\uffd5\105\uffd5\001\002" +
    "\000\042\015\214\065\114\066\105\070\110\071\116\072" +
    "\106\073\113\074\117\076\121\077\104\100\107\101\111" +
    "\102\115\103\112\104\122\105\103\001\002\000\056\013" +
    "\uff77\015\uff77\020\uff77\022\uff77\023\uff77\051\uff77\056\uff77" +
    "\065\uff77\066\uff77\070\uff77\071\uff77\072\uff77\073\uff77\074" +
    "\uff77\076\uff77\077\uff77\100\uff77\101\uff77\102\uff77\103\uff77" +
    "\104\uff77\105\uff77\001\002\000\036\004\051\005\073\006" +
    "\053\007\065\010\061\014\057\034\056\035\071\055\062" +
    "\057\063\060\070\061\055\066\047\106\054\001\002\000" +
    "\042\015\217\065\114\066\105\070\110\071\116\072\106" +
    "\073\113\074\117\076\121\077\104\100\107\101\111\102" +
    "\115\103\112\104\122\105\103\001\002\000\056\013\uffd1" +
    "\015\uffd1\020\uffd1\022\uffd1\023\uffd1\051\uffd1\056\uffd1\065" +
    "\uffd1\066\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1" +
    "\076\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1\103\uffd1\104" +
    "\uffd1\105\uffd1\001\002\000\056\013\uff8b\015\uff8b\020\uff8b" +
    "\022\uff8b\023\uff8b\051\uff8b\056\uff8b\065\114\066\105\070" +
    "\110\071\116\072\106\073\113\074\117\076\121\077\104" +
    "\100\107\101\111\102\115\103\112\104\uff8b\105\uff8b\001" +
    "\002\000\056\013\uff99\015\uff99\020\uff99\022\uff99\023\uff99" +
    "\051\uff99\056\uff99\065\uff99\066\uff99\070\uff99\071\uff99\072" +
    "\uff99\073\uff99\074\uff99\076\uff99\077\uff99\100\uff99\101\uff99" +
    "\102\uff99\103\uff99\104\uff99\105\uff99\001\002\000\010\013" +
    "\uffc1\021\223\075\224\001\002\000\004\022\233\001\002" +
    "\000\004\021\225\001\002\000\036\004\051\005\073\006" +
    "\053\007\065\010\061\014\057\034\056\035\071\055\062" +
    "\057\063\060\070\061\055\066\047\106\054\001\002\000" +
    "\044\022\uffba\023\uffba\065\114\066\105\070\110\071\116" +
    "\072\106\073\113\074\117\076\121\077\104\100\107\101" +
    "\111\102\115\103\112\104\122\105\103\001\002\000\006" +
    "\022\231\023\230\001\002\000\036\004\051\005\073\006" +
    "\053\007\065\010\061\014\057\034\056\035\071\055\062" +
    "\057\063\060\070\061\055\066\047\106\054\001\002\000" +
    "\004\013\uffc0\001\002\000\044\022\uffbb\023\uffbb\065\114" +
    "\066\105\070\110\071\116\072\106\073\113\074\117\076" +
    "\121\077\104\100\107\101\111\102\115\103\112\104\122" +
    "\105\103\001\002\000\006\013\uffbf\075\234\001\002\000" +
    "\004\021\235\001\002\000\004\021\236\001\002\000\036" +
    "\004\051\005\073\006\053\007\065\010\061\014\057\034" +
    "\056\035\071\055\062\057\063\060\070\061\055\066\047" +
    "\106\054\001\002\000\006\022\241\023\240\001\002\000" +
    "\004\021\242\001\002\000\004\013\uffbe\001\002\000\036" +
    "\004\051\005\073\006\053\007\065\010\061\014\057\034" +
    "\056\035\071\055\062\057\063\060\070\061\055\066\047" +
    "\106\054\001\002\000\006\022\244\023\230\001\002\000" +
    "\006\022\uffbd\023\uffbd\001\002\000\006\022\246\023\230" +
    "\001\002\000\006\022\uffbc\023\uffbc\001\002\000\030\002" +
    "\ufff6\010\ufff6\011\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6" +
    "\042\ufff6\062\ufff6\107\ufff6\110\ufff6\001\002\000\004\014" +
    "\251\001\002\000\006\010\161\015\252\001\002\000\004" +
    "\013\uff9e\001\002\000\006\015\254\023\164\001\002\000" +
    "\004\013\uff9f\001\002\000\036\004\051\005\073\006\053" +
    "\007\065\010\061\014\057\034\056\035\071\055\062\057" +
    "\063\060\070\061\055\066\047\106\054\001\002\000\042" +
    "\022\257\065\114\066\105\070\110\071\116\072\106\073" +
    "\113\074\117\076\121\077\104\100\107\101\111\102\115" +
    "\103\112\104\122\105\103\001\002\000\004\021\260\001" +
    "\002\000\036\004\051\005\073\006\053\007\065\010\061" +
    "\014\057\034\056\035\071\055\062\057\063\060\070\061" +
    "\055\066\047\106\054\001\002\000\042\022\262\065\114" +
    "\066\105\070\110\071\116\072\106\073\113\074\117\076" +
    "\121\077\104\100\107\101\111\102\115\103\112\104\122" +
    "\105\103\001\002\000\004\075\263\001\002\000\036\004" +
    "\051\005\073\006\053\007\065\010\061\014\057\034\056" +
    "\035\071\055\062\057\063\060\070\061\055\066\047\106" +
    "\054\001\002\000\042\013\uffb6\065\114\066\105\070\110" +
    "\071\116\072\106\073\113\074\117\076\121\077\104\100" +
    "\107\101\111\102\115\103\112\104\122\105\103\001\002" +
    "\000\030\002\ufffa\010\ufffa\011\ufffa\036\ufffa\037\ufffa\040" +
    "\ufffa\041\ufffa\042\ufffa\062\ufffa\107\ufffa\110\ufffa\001\002" +
    "\000\030\002\ufff9\010\ufff9\011\ufff9\036\ufff9\037\ufff9\040" +
    "\ufff9\041\ufff9\042\ufff9\062\ufff9\107\ufff9\110\ufff9\001\002" +
    "\000\004\017\270\001\002\000\004\010\271\001\002\000" +
    "\004\012\276\001\002\000\006\010\uffac\020\uffac\001\002" +
    "\000\006\010\271\020\275\001\002\000\006\010\uffad\020" +
    "\uffad\001\002\000\004\013\uffae\001\002\000\020\010\277" +
    "\036\011\037\031\040\026\041\007\042\021\107\022\001" +
    "\002\000\004\013\302\001\002\000\004\013\301\001\002" +
    "\000\006\010\uffab\020\uffab\001\002\000\006\010\uffaa\020" +
    "\uffaa\001\002\000\004\014\304\001\002\000\006\010\305" +
    "\015\306\001\002\000\004\012\u015e\001\002\000\004\017" +
    "\u015b\001\002\000\006\015\uffa2\023\uffa2\001\002\000\006" +
    "\015\312\023\311\001\002\000\004\010\305\001\002\000" +
    "\004\017\313\001\002\000\034\003\342\010\341\011\023" +
    "\033\320\043\337\045\326\046\355\047\357\050\330\053" +
    "\322\054\333\062\010\111\327\001\002\000\004\013\u0159" +
    "\001\002\000\004\013\u0158\001\002\000\004\013\u0157\001" +
    "\002\000\036\003\uffee\010\uffee\011\uffee\020\uffee\033\uffee" +
    "\043\uffee\045\uffee\046\uffee\047\uffee\050\uffee\053\uffee\054" +
    "\uffee\062\uffee\111\uffee\001\002\000\004\014\u0154\001\002" +
    "\000\004\013\u0153\001\002\000\004\013\uffa9\001\002\000" +
    "\004\013\u0152\001\002\000\004\013\u0151\001\002\000\004" +
    "\013\u0150\001\002\000\004\014\u0145\001\002\000\040\004" +
    "\051\005\073\006\053\007\065\010\061\013\uffa6\014\057" +
    "\034\056\035\071\055\062\057\063\060\070\061\055\066" +
    "\047\106\054\001\002\000\004\014\u012e\001\002\000\004" +
    "\013\u012d\001\002\000\004\013\u012c\001\002\000\004\013" +
    "\uffa8\001\002\000\004\013\u012b\001\002\000\004\013\u012a" +
    "\001\002\000\004\013\u0129\001\002\000\004\014\u011e\001" +
    "\002\000\036\003\342\010\341\011\023\020\u011d\033\320" +
    "\043\337\045\326\046\355\047\357\050\330\053\322\054" +
    "\333\062\010\111\327\001\002\000\016\014\144\016\u010a" +
    "\021\u0106\063\u0109\064\u0107\075\u0108\001\002\000\004\013" +
    "\u0105\001\002\000\004\013\u0104\001\002\000\004\013\u0103" +
    "\001\002\000\004\013\u0102\001\002\000\004\013\u0101\001" +
    "\002\000\004\013\u0100\001\002\000\036\003\ufff4\010\ufff4" +
    "\011\ufff4\020\ufff4\033\ufff4\043\ufff4\045\ufff4\046\ufff4\047" +
    "\ufff4\050\ufff4\053\ufff4\054\ufff4\062\ufff4\111\ufff4\001\002" +
    "\000\036\003\uffed\010\uffed\011\uffed\020\uffed\033\uffed\043" +
    "\uffed\045\uffed\046\uffed\047\uffed\050\uffed\053\uffed\054\uffed" +
    "\062\uffed\111\uffed\001\002\000\036\003\uffef\010\uffef\011" +
    "\uffef\020\uffef\033\uffef\043\uffef\045\uffef\046\uffef\047\uffef" +
    "\050\uffef\053\uffef\054\uffef\062\uffef\111\uffef\001\002\000" +
    "\004\013\377\001\002\000\004\013\376\001\002\000\004" +
    "\014\370\001\002\000\036\003\ufff0\010\ufff0\011\ufff0\020" +
    "\ufff0\033\ufff0\043\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0" +
    "\053\ufff0\054\ufff0\062\ufff0\111\ufff0\001\002\000\004\017" +
    "\360\001\002\000\034\003\342\010\341\011\023\033\320" +
    "\043\337\045\326\046\355\047\357\050\330\053\322\054" +
    "\333\062\010\111\327\001\002\000\036\003\342\010\341" +
    "\011\023\020\363\033\320\043\337\045\326\046\355\047" +
    "\357\050\330\053\322\054\333\062\010\111\327\001\002" +
    "\000\036\003\ufff5\010\ufff5\011\ufff5\020\ufff5\033\ufff5\043" +
    "\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\053\ufff5\054\ufff5" +
    "\062\ufff5\111\ufff5\001\002\000\004\046\364\001\002\000" +
    "\004\014\365\001\002\000\036\004\051\005\073\006\053" +
    "\007\065\010\061\014\057\034\056\035\071\055\062\057" +
    "\063\060\070\061\055\066\047\106\054\001\002\000\042" +
    "\015\367\065\114\066\105\070\110\071\116\072\106\073" +
    "\113\074\117\076\121\077\104\100\107\101\111\102\115" +
    "\103\112\104\122\105\103\001\002\000\004\013\uffcb\001" +
    "\002\000\036\004\051\005\073\006\053\007\065\010\061" +
    "\014\057\034\056\035\071\055\062\057\063\060\070\061" +
    "\055\066\047\106\054\001\002\000\042\015\372\065\114" +
    "\066\105\070\110\071\116\072\106\073\113\074\117\076" +
    "\121\077\104\100\107\101\111\102\115\103\112\104\122" +
    "\105\103\001\002\000\004\017\373\001\002\000\034\003" +
    "\342\010\341\011\023\033\320\043\337\045\326\046\355" +
    "\047\357\050\330\053\322\054\333\062\010\111\327\001" +
    "\002\000\036\003\342\010\341\011\023\020\375\033\320" +
    "\043\337\045\326\046\355\047\357\050\330\053\322\054" +
    "\333\062\010\111\327\001\002\000\036\003\uffcc\010\uffcc" +
    "\011\uffcc\020\uffcc\033\uffcc\043\uffcc\045\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\053\uffcc\054\uffcc\062\uffcc\111\uffcc\001\002" +
    "\000\036\003\uffea\010\uffea\011\uffea\020\uffea\033\uffea\043" +
    "\uffea\045\uffea\046\uffea\047\uffea\050\uffea\053\uffea\054\uffea" +
    "\062\uffea\111\uffea\001\002\000\036\003\uffde\010\uffde\011" +
    "\uffde\020\uffde\033\uffde\043\uffde\045\uffde\046\uffde\047\uffde" +
    "\050\uffde\053\uffde\054\uffde\062\uffde\111\uffde\001\002\000" +
    "\036\003\uffe2\010\uffe2\011\uffe2\020\uffe2\033\uffe2\043\uffe2" +
    "\045\uffe2\046\uffe2\047\uffe2\050\uffe2\053\uffe2\054\uffe2\062" +
    "\uffe2\111\uffe2\001\002\000\036\003\uffdf\010\uffdf\011\uffdf" +
    "\020\uffdf\033\uffdf\043\uffdf\045\uffdf\046\uffdf\047\uffdf\050" +
    "\uffdf\053\uffdf\054\uffdf\062\uffdf\111\uffdf\001\002\000\036" +
    "\003\uffe9\010\uffe9\011\uffe9\020\uffe9\033\uffe9\043\uffe9\045" +
    "\uffe9\046\uffe9\047\uffe9\050\uffe9\053\uffe9\054\uffe9\062\uffe9" +
    "\111\uffe9\001\002\000\036\003\uffe7\010\uffe7\011\uffe7\020" +
    "\uffe7\033\uffe7\043\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7" +
    "\053\uffe7\054\uffe7\062\uffe7\111\uffe7\001\002\000\036\003" +
    "\uffeb\010\uffeb\011\uffeb\020\uffeb\033\uffeb\043\uffeb\045\uffeb" +
    "\046\uffeb\047\uffeb\050\uffeb\053\uffeb\054\uffeb\062\uffeb\111" +
    "\uffeb\001\002\000\036\003\uffdc\010\uffdc\011\uffdc\020\uffdc" +
    "\033\uffdc\043\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\053" +
    "\uffdc\054\uffdc\062\uffdc\111\uffdc\001\002\000\036\004\051" +
    "\005\073\006\053\007\065\010\061\014\057\034\056\035" +
    "\071\055\062\057\063\060\070\061\055\066\047\106\054" +
    "\001\002\000\006\013\uffd6\015\uffd6\001\002\000\036\004" +
    "\051\005\073\006\053\007\065\010\061\014\057\034\056" +
    "\035\071\055\062\057\063\060\070\061\055\066\047\106" +
    "\054\001\002\000\006\013\uffd7\015\uffd7\001\002\000\014" +
    "\025\u010d\027\u010b\030\147\031\150\032\u010c\001\002\000" +
    "\004\014\u0113\001\002\000\004\014\u0111\001\002\000\004" +
    "\014\u010e\001\002\000\036\004\051\005\073\006\053\007" +
    "\065\010\061\014\057\034\056\035\071\055\062\057\063" +
    "\060\070\061\055\066\047\106\054\001\002\000\042\015" +
    "\u0110\065\114\066\105\070\110\071\116\072\106\073\113" +
    "\074\117\076\121\077\104\100\107\101\111\102\115\103" +
    "\112\104\122\105\103\001\002\000\004\013\uffb4\001\002" +
    "\000\004\015\u0112\001\002\000\004\013\uffaf\001\002\000" +
    "\036\004\051\005\073\006\053\007\065\010\061\014\057" +
    "\034\056\035\071\055\062\057\063\060\070\061\055\066" +
    "\047\106\054\001\002\000\042\023\u0115\065\114\066\105" +
    "\070\110\071\116\072\106\073\113\074\117\076\121\077" +
    "\104\100\107\101\111\102\115\103\112\104\122\105\103" +
    "\001\002\000\036\004\051\005\073\006\053\007\065\010" +
    "\061\014\057\034\056\035\071\055\062\057\063\060\070" +
    "\061\055\066\047\106\054\001\002\000\042\015\u0117\065" +
    "\114\066\105\070\110\071\116\072\106\073\113\074\117" +
    "\076\121\077\104\100\107\101\111\102\115\103\112\104" +
    "\122\105\103\001\002\000\004\013\uffb2\001\002\000\044" +
    "\013\uffd8\015\uffd8\065\114\066\105\070\110\071\116\072" +
    "\106\073\113\074\117\076\121\077\104\100\107\101\111" +
    "\102\115\103\112\104\122\105\103\001\002\000\042\022" +
    "\u011a\065\114\066\105\070\110\071\116\072\106\073\113" +
    "\074\117\076\121\077\104\100\107\101\111\102\115\103" +
    "\112\104\122\105\103\001\002\000\006\021\260\075\u011b" +
    "\001\002\000\036\004\051\005\073\006\053\007\065\010" +
    "\061\014\057\034\056\035\071\055\062\057\063\060\070" +
    "\061\055\066\047\106\054\001\002\000\042\013\uffb8\065" +
    "\114\066\105\070\110\071\116\072\106\073\113\074\117" +
    "\076\121\077\104\100\107\101\111\102\115\103\112\104" +
    "\122\105\103\001\002\000\030\002\uffa5\010\uffa5\011\uffa5" +
    "\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\062\uffa5\107" +
    "\uffa5\110\uffa5\001\002\000\036\004\051\005\073\006\053" +
    "\007\065\010\061\014\057\034\056\035\071\055\062\057" +
    "\063\060\070\061\055\066\047\106\054\001\002\000\042" +
    "\015\u0120\065\114\066\105\070\110\071\116\072\106\073" +
    "\113\074\117\076\121\077\104\100\107\101\111\102\115" +
    "\103\112\104\122\105\103\001\002\000\004\017\u0121\001" +
    "\002\000\034\003\342\010\341\011\023\033\320\043\337" +
    "\045\326\046\355\047\357\050\330\053\322\054\333\062" +
    "\010\111\327\001\002\000\036\003\342\010\341\011\023" +
    "\020\u0123\033\320\043\337\045\326\046\355\047\357\050" +
    "\330\053\322\054\333\062\010\111\327\001\002\000\040" +
    "\003\uffd0\010\uffd0\011\uffd0\020\uffd0\033\uffd0\043\uffd0\044" +
    "\u0124\045\uffd0\046\uffd0\047\uffd0\050\uffd0\053\uffd0\054\uffd0" +
    "\062\uffd0\111\uffd0\001\002\000\006\017\u0125\043\337\001" +
    "\002\000\034\003\342\010\341\011\023\033\320\043\337" +
    "\045\326\046\355\047\357\050\330\053\322\054\333\062" +
    "\010\111\327\001\002\000\036\003\uffce\010\uffce\011\uffce" +
    "\020\uffce\033\uffce\043\uffce\045\uffce\046\uffce\047\uffce\050" +
    "\uffce\053\uffce\054\uffce\062\uffce\111\uffce\001\002\000\036" +
    "\003\342\010\341\011\023\020\u0128\033\320\043\337\045" +
    "\326\046\355\047\357\050\330\053\322\054\333\062\010" +
    "\111\327\001\002\000\036\003\uffcf\010\uffcf\011\uffcf\020" +
    "\uffcf\033\uffcf\043\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\053\uffcf\054\uffcf\062\uffcf\111\uffcf\001\002\000\036\003" +
    "\ufff1\010\ufff1\011\ufff1\020\ufff1\033\ufff1\043\ufff1\045\ufff1" +
    "\046\ufff1\047\ufff1\050\ufff1\053\ufff1\054\ufff1\062\ufff1\111" +
    "\ufff1\001\002\000\036\003\uffe1\010\uffe1\011\uffe1\020\uffe1" +
    "\033\uffe1\043\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\053" +
    "\uffe1\054\uffe1\062\uffe1\111\uffe1\001\002\000\036\003\uffe5" +
    "\010\uffe5\011\uffe5\020\uffe5\033\uffe5\043\uffe5\045\uffe5\046" +
    "\uffe5\047\uffe5\050\uffe5\053\uffe5\054\uffe5\062\uffe5\111\uffe5" +
    "\001\002\000\036\003\uffe4\010\uffe4\011\uffe4\020\uffe4\033" +
    "\uffe4\043\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\053\uffe4" +
    "\054\uffe4\062\uffe4\111\uffe4\001\002\000\036\003\uffe3\010" +
    "\uffe3\011\uffe3\020\uffe3\033\uffe3\043\uffe3\045\uffe3\046\uffe3" +
    "\047\uffe3\050\uffe3\053\uffe3\054\uffe3\062\uffe3\111\uffe3\001" +
    "\002\000\036\004\051\005\073\006\053\007\065\010\061" +
    "\014\057\034\056\035\071\055\062\057\063\060\070\061" +
    "\055\066\047\106\054\001\002\000\042\015\u0130\065\114" +
    "\066\105\070\110\071\116\072\106\073\113\074\117\076" +
    "\121\077\104\100\107\101\111\102\115\103\112\104\122" +
    "\105\103\001\002\000\004\017\u0131\001\002\000\042\004" +
    "\051\005\073\006\053\007\065\010\061\014\057\020\u0133" +
    "\034\056\035\071\052\u0138\055\062\057\063\060\070\061" +
    "\055\066\047\106\054\001\002\000\004\020\u0143\001\002" +
    "\000\036\003\uffc9\010\uffc9\011\uffc9\020\uffc9\033\uffc9\043" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\053\uffc9\054\uffc9" +
    "\062\uffc9\111\uffc9\001\002\000\042\004\uffc4\005\uffc4\006" +
    "\uffc4\007\uffc4\010\uffc4\014\uffc4\020\uffc4\034\uffc4\035\uffc4" +
    "\052\uffc4\055\uffc4\057\uffc4\060\uffc4\061\uffc4\066\uffc4\106" +
    "\uffc4\001\002\000\004\020\uffc6\001\002\000\042\051\u013f" +
    "\065\114\066\105\070\110\071\116\072\106\073\113\074" +
    "\117\076\121\077\104\100\107\101\111\102\115\103\112" +
    "\104\122\105\103\001\002\000\042\004\051\005\073\006" +
    "\053\007\065\010\061\014\057\020\uffc8\034\056\035\071" +
    "\052\u0138\055\062\057\063\060\070\061\055\066\047\106" +
    "\054\001\002\000\004\051\u0139\001\002\000\004\017\u013a" +
    "\001\002\000\034\003\342\010\341\011\023\033\320\043" +
    "\337\045\326\046\355\047\357\050\330\053\322\054\333" +
    "\062\010\111\327\001\002\000\036\003\342\010\341\011" +
    "\023\020\u013c\033\320\043\337\045\326\046\355\047\357" +
    "\050\330\053\322\054\333\062\010\111\327\001\002\000" +
    "\004\020\uffc2\001\002\000\042\004\uffc5\005\uffc5\006\uffc5" +
    "\007\uffc5\010\uffc5\014\uffc5\020\uffc5\034\uffc5\035\uffc5\052" +
    "\uffc5\055\uffc5\057\uffc5\060\uffc5\061\uffc5\066\uffc5\106\uffc5" +
    "\001\002\000\004\020\uffc7\001\002\000\004\017\u0140\001" +
    "\002\000\034\003\342\010\341\011\023\033\320\043\337" +
    "\045\326\046\355\047\357\050\330\053\322\054\333\062" +
    "\010\111\327\001\002\000\036\003\342\010\341\011\023" +
    "\020\u0142\033\320\043\337\045\326\046\355\047\357\050" +
    "\330\053\322\054\333\062\010\111\327\001\002\000\042" +
    "\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\014\uffc3\020" +
    "\uffc3\034\uffc3\035\uffc3\052\uffc3\055\uffc3\057\uffc3\060\uffc3" +
    "\061\uffc3\066\uffc3\106\uffc3\001\002\000\036\003\uffca\010" +
    "\uffca\011\uffca\020\uffca\033\uffca\043\uffca\045\uffca\046\uffca" +
    "\047\uffca\050\uffca\053\uffca\054\uffca\062\uffca\111\uffca\001" +
    "\002\000\042\013\uffa7\065\114\066\105\070\110\071\116" +
    "\072\106\073\113\074\117\076\121\077\104\100\107\101" +
    "\111\102\115\103\112\104\122\105\103\001\002\000\004" +
    "\010\u0146\001\002\000\010\063\u0109\064\u0107\075\u0108\001" +
    "\002\000\004\013\u0148\001\002\000\036\004\051\005\073" +
    "\006\053\007\065\010\061\014\057\034\056\035\071\055" +
    "\062\057\063\060\070\061\055\066\047\106\054\001\002" +
    "\000\042\013\u014a\065\114\066\105\070\110\071\116\072" +
    "\106\073\113\074\117\076\121\077\104\100\107\101\111" +
    "\102\115\103\112\104\122\105\103\001\002\000\004\010" +
    "\u0146\001\002\000\004\015\u014c\001\002\000\004\017\u014d" +
    "\001\002\000\034\003\342\010\341\011\023\033\320\043" +
    "\337\045\326\046\355\047\357\050\330\053\322\054\333" +
    "\062\010\111\327\001\002\000\036\003\342\010\341\011" +
    "\023\020\u014f\033\320\043\337\045\326\046\355\047\357" +
    "\050\330\053\322\054\333\062\010\111\327\001\002\000" +
    "\036\003\uffcd\010\uffcd\011\uffcd\020\uffcd\033\uffcd\043\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\050\uffcd\053\uffcd\054\uffcd\062" +
    "\uffcd\111\uffcd\001\002\000\036\003\uffe8\010\uffe8\011\uffe8" +
    "\020\uffe8\033\uffe8\043\uffe8\045\uffe8\046\uffe8\047\uffe8\050" +
    "\uffe8\053\uffe8\054\uffe8\062\uffe8\111\uffe8\001\002\000\036" +
    "\003\uffe6\010\uffe6\011\uffe6\020\uffe6\033\uffe6\043\uffe6\045" +
    "\uffe6\046\uffe6\047\uffe6\050\uffe6\053\uffe6\054\uffe6\062\uffe6" +
    "\111\uffe6\001\002\000\036\003\ufff3\010\ufff3\011\ufff3\020" +
    "\ufff3\033\ufff3\043\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3" +
    "\053\ufff3\054\ufff3\062\ufff3\111\ufff3\001\002\000\036\003" +
    "\uffdd\010\uffdd\011\uffdd\020\uffdd\033\uffdd\043\uffdd\045\uffdd" +
    "\046\uffdd\047\uffdd\050\uffdd\053\uffdd\054\uffdd\062\uffdd\111" +
    "\uffdd\001\002\000\036\004\051\005\073\006\053\007\065" +
    "\010\061\014\057\034\056\035\071\055\062\057\063\060" +
    "\070\061\055\066\047\106\054\001\002\000\042\015\u0156" +
    "\065\114\066\105\070\110\071\116\072\106\073\113\074" +
    "\117\076\121\077\104\100\107\101\111\102\115\103\112" +
    "\104\122\105\103\001\002\000\004\013\uffdb\001\002\000" +
    "\036\003\uffec\010\uffec\011\uffec\020\uffec\033\uffec\043\uffec" +
    "\045\uffec\046\uffec\047\uffec\050\uffec\053\uffec\054\uffec\062" +
    "\uffec\111\uffec\001\002\000\036\003\uffe0\010\uffe0\011\uffe0" +
    "\020\uffe0\033\uffe0\043\uffe0\045\uffe0\046\uffe0\047\uffe0\050" +
    "\uffe0\053\uffe0\054\uffe0\062\uffe0\111\uffe0\001\002\000\036" +
    "\003\ufff2\010\ufff2\011\ufff2\020\ufff2\033\ufff2\043\ufff2\045" +
    "\ufff2\046\ufff2\047\ufff2\050\ufff2\053\ufff2\054\ufff2\062\ufff2" +
    "\111\ufff2\001\002\000\006\015\uffa3\023\uffa3\001\002\000" +
    "\034\003\342\010\341\011\023\033\320\043\337\045\326" +
    "\046\355\047\357\050\330\053\322\054\333\062\010\111" +
    "\327\001\002\000\036\003\342\010\341\011\023\020\u015d" +
    "\033\320\043\337\045\326\046\355\047\357\050\330\053" +
    "\322\054\333\062\010\111\327\001\002\000\030\002\uffa4" +
    "\010\uffa4\011\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042" +
    "\uffa4\062\uffa4\107\uffa4\110\uffa4\001\002\000\016\036\011" +
    "\037\031\040\026\041\007\042\021\107\022\001\002\000" +
    "\010\015\uffa0\023\uffa0\075\u0160\001\002\000\036\004\051" +
    "\005\073\006\053\007\065\010\061\014\057\034\056\035" +
    "\071\055\062\057\063\060\070\061\055\066\047\106\054" +
    "\001\002\000\044\015\uffa1\023\uffa1\065\114\066\105\070" +
    "\110\071\116\072\106\073\113\074\117\076\121\077\104" +
    "\100\107\101\111\102\115\103\112\104\122\105\103\001" +
    "\002\000\030\002\uffff\010\uffff\011\uffff\036\uffff\037\uffff" +
    "\040\uffff\041\uffff\042\uffff\062\uffff\107\uffff\110\uffff\001" +
    "\002\000\030\002\ufff7\010\ufff7\011\ufff7\036\ufff7\037\ufff7" +
    "\040\ufff7\041\ufff7\042\ufff7\062\ufff7\107\ufff7\110\ufff7\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0161\000\032\002\004\003\017\004\026\010\027\032" +
    "\005\033\012\037\011\041\023\043\016\052\015\056\024" +
    "\064\003\001\001\000\002\001\001\000\026\003\u0161\010" +
    "\027\032\005\033\012\037\011\041\023\043\016\052\015" +
    "\056\024\064\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\012\047\013" +
    "\063\014\065\015\074\022\066\034\076\040\073\045\057" +
    "\047\051\050\071\057\075\001\001\000\030\012\047\013" +
    "\063\014\065\015\074\022\220\034\076\040\073\045\057" +
    "\047\051\050\071\057\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\012\047\013\063\014\065\015\074\022\217\034\076\040" +
    "\073\045\057\047\051\050\071\057\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\012\047\013\063\014" +
    "\065\015\074\022\212\034\076\040\073\045\057\047\051" +
    "\050\071\057\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\012\047\013\063\014\065" +
    "\015\074\022\101\034\076\040\073\045\057\047\051\050" +
    "\071\057\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\012\047\013\063\014\065\015\074\022\140\034" +
    "\076\040\073\045\057\047\051\050\071\057\075\001\001" +
    "\000\030\012\047\013\063\014\065\015\074\022\137\034" +
    "\076\040\073\045\057\047\051\050\071\057\075\001\001" +
    "\000\030\012\047\013\063\014\065\015\074\022\136\034" +
    "\076\040\073\045\057\047\051\050\071\057\075\001\001" +
    "\000\030\012\047\013\063\014\065\015\074\022\135\034" +
    "\076\040\073\045\057\047\051\050\071\057\075\001\001" +
    "\000\030\012\047\013\063\014\065\015\074\022\134\034" +
    "\076\040\073\045\057\047\051\050\071\057\075\001\001" +
    "\000\030\012\047\013\063\014\065\015\074\022\133\034" +
    "\076\040\073\045\057\047\051\050\071\057\075\001\001" +
    "\000\030\012\047\013\063\014\065\015\074\022\132\034" +
    "\076\040\073\045\057\047\051\050\071\057\075\001\001" +
    "\000\030\012\047\013\063\014\065\015\074\022\131\034" +
    "\076\040\073\045\057\047\051\050\071\057\075\001\001" +
    "\000\030\012\047\013\063\014\065\015\074\022\130\034" +
    "\076\040\073\045\057\047\051\050\071\057\075\001\001" +
    "\000\030\012\047\013\063\014\065\015\074\022\127\034" +
    "\076\040\073\045\057\047\051\050\071\057\075\001\001" +
    "\000\030\012\047\013\063\014\065\015\074\022\126\034" +
    "\076\040\073\045\057\047\051\050\071\057\075\001\001" +
    "\000\030\012\047\013\063\014\065\015\074\022\125\034" +
    "\076\040\073\045\057\047\051\050\071\057\075\001\001" +
    "\000\030\012\047\013\063\014\065\015\074\022\124\034" +
    "\076\040\073\045\057\047\051\050\071\057\075\001\001" +
    "\000\002\001\001\000\030\012\047\013\063\014\065\015" +
    "\074\022\123\034\076\040\073\045\057\047\051\050\071" +
    "\057\075\001\001\000\030\012\047\013\063\014\065\015" +
    "\074\022\122\034\076\040\073\045\057\047\051\050\071" +
    "\057\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\012\047\013\063\014\065\015\074\022\175\034\076" +
    "\040\073\045\057\047\051\050\071\057\075\001\001\000" +
    "\030\012\047\013\063\014\065\015\074\022\172\034\076" +
    "\040\073\045\057\047\051\050\071\057\075\001\001\000" +
    "\004\054\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\012\047\013\063\014\065\015\074" +
    "\022\153\034\076\040\073\045\057\047\051\050\071\057" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\012\047\013\063\014\065\015\074\022\156\034\076\040" +
    "\073\045\057\047\051\050\071\057\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\012\047\013\063\014\065\015" +
    "\074\022\167\034\076\040\073\045\057\047\051\050\071" +
    "\057\075\001\001\000\002\001\001\000\030\012\047\013" +
    "\063\014\065\015\074\022\171\034\076\040\073\045\057" +
    "\047\051\050\071\057\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\012\047\013\063\014" +
    "\065\015\074\022\200\034\076\040\073\045\057\047\051" +
    "\050\071\057\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\012\047\013\063\014\065\015\074\022\203" +
    "\034\076\040\073\045\057\047\051\050\071\057\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\012\047" +
    "\013\063\014\065\015\074\022\206\034\076\040\073\045" +
    "\057\047\051\050\071\057\075\001\001\000\002\001\001" +
    "\000\004\032\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\012\047" +
    "\013\063\014\065\015\074\022\215\034\076\040\073\045" +
    "\057\047\051\050\071\057\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\012\047\013\063\014\065\015\074\022\225\034\076\036" +
    "\226\040\073\045\057\047\051\050\071\057\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\012\047\013" +
    "\063\014\065\015\074\022\231\034\076\040\073\045\057" +
    "\047\051\050\071\057\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\236\001\001\000\032\012\047\013\063\014\065\015" +
    "\074\022\225\034\076\036\244\040\073\045\057\047\051" +
    "\050\071\057\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\012\047\013\063\014\065" +
    "\015\074\022\225\034\076\036\242\040\073\045\057\047" +
    "\051\050\071\057\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\012" +
    "\047\013\063\014\065\015\074\022\255\034\076\040\073" +
    "\045\057\047\051\050\071\057\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\012\047\013\063\014\065" +
    "\015\074\022\260\034\076\040\073\045\057\047\051\050" +
    "\071\057\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\012\047\013\063\014\065\015\074\022\263\034" +
    "\076\040\073\045\057\047\051\050\071\057\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\062\272\063\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\277\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\053\307\055\306" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\u0159\001\001\000\002" +
    "\001\001\000\064\005\337\006\347\007\322\010\313\011" +
    "\335\016\355\017\316\020\350\021\315\023\342\024\353" +
    "\025\351\033\344\035\324\037\343\041\323\043\333\044" +
    "\331\046\330\047\346\050\334\051\314\057\352\061\320" +
    "\064\345\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\012\047" +
    "\013\063\014\065\015\074\022\u0143\034\076\040\073\045" +
    "\057\047\051\050\071\057\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\006\361\007\322\010\313\011\335\016" +
    "\355\017\316\020\350\021\315\023\342\024\353\025\351" +
    "\033\344\035\324\037\343\041\323\043\333\044\331\046" +
    "\330\047\346\050\334\051\314\057\352\061\320\064\345" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\005" +
    "\360\006\347\007\322\010\313\011\335\016\355\017\316" +
    "\020\350\021\315\023\342\024\353\025\351\033\344\035" +
    "\324\037\343\041\323\043\333\044\331\046\330\047\346" +
    "\050\334\051\314\057\352\061\320\064\345\001\001\000" +
    "\062\006\361\007\322\010\313\011\335\016\355\017\316" +
    "\020\350\021\315\023\342\024\353\025\351\033\344\035" +
    "\324\037\343\041\323\043\333\044\331\046\330\047\346" +
    "\050\334\051\314\057\352\061\320\064\345\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\012\047\013\063\014\065\015\074\022\365\034\076\040" +
    "\073\045\057\047\051\050\071\057\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\012\047\013\063\014" +
    "\065\015\074\022\370\034\076\040\073\045\057\047\051" +
    "\050\071\057\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\005\373\006\347\007\322\010\313\011\335" +
    "\016\355\017\316\020\350\021\315\023\342\024\353\025" +
    "\351\033\344\035\324\037\343\041\323\043\333\044\331" +
    "\046\330\047\346\050\334\051\314\057\352\061\320\064" +
    "\345\001\001\000\062\006\361\007\322\010\313\011\335" +
    "\016\355\017\316\020\350\021\315\023\342\024\353\025" +
    "\351\033\344\035\324\037\343\041\323\043\333\044\331" +
    "\046\330\047\346\050\334\051\314\057\352\061\320\064" +
    "\345\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\012\047\013\063\014\065\015\074\022\u0118\034" +
    "\076\040\073\045\057\047\051\050\071\057\075\001\001" +
    "\000\002\001\001\000\030\012\047\013\063\014\065\015" +
    "\074\022\u0117\034\076\040\073\045\057\047\051\050\071" +
    "\057\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\012\047\013\063\014\065\015\074\022\u010e\034\076\040" +
    "\073\045\057\047\051\050\071\057\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\012\047\013\063\014\065\015\074\022\u0113" +
    "\034\076\040\073\045\057\047\051\050\071\057\075\001" +
    "\001\000\002\001\001\000\030\012\047\013\063\014\065" +
    "\015\074\022\u0115\034\076\040\073\045\057\047\051\050" +
    "\071\057\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\012\047\013\063\014\065\015\074\022\u011b\034\076" +
    "\040\073\045\057\047\051\050\071\057\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\012\047\013\063" +
    "\014\065\015\074\022\u011e\034\076\040\073\045\057\047" +
    "\051\050\071\057\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\064\005\u0121\006\347\007\322\010\313\011" +
    "\335\016\355\017\316\020\350\021\315\023\342\024\353" +
    "\025\351\033\344\035\324\037\343\041\323\043\333\044" +
    "\331\046\330\047\346\050\334\051\314\057\352\061\320" +
    "\064\345\001\001\000\062\006\361\007\322\010\313\011" +
    "\335\016\355\017\316\020\350\021\315\023\342\024\353" +
    "\025\351\033\344\035\324\037\343\041\323\043\333\044" +
    "\331\046\330\047\346\050\334\051\314\057\352\061\320" +
    "\064\345\001\001\000\002\001\001\000\004\016\u0125\001" +
    "\001\000\064\005\u0126\006\347\007\322\010\313\011\335" +
    "\016\355\017\316\020\350\021\315\023\342\024\353\025" +
    "\351\033\344\035\324\037\343\041\323\043\333\044\331" +
    "\046\330\047\346\050\334\051\314\057\352\061\320\064" +
    "\345\001\001\000\002\001\001\000\062\006\361\007\322" +
    "\010\313\011\335\016\355\017\316\020\350\021\315\023" +
    "\342\024\353\025\351\033\344\035\324\037\343\041\323" +
    "\043\333\044\331\046\330\047\346\050\334\051\314\057" +
    "\352\061\320\064\345\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\012\047\013\063\014\065" +
    "\015\074\022\u012e\034\076\040\073\045\057\047\051\050" +
    "\071\057\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\012\047\013\063\014\065\015\074\022\u0135\026" +
    "\u0133\027\u0134\030\u0131\031\u0136\034\076\040\073\045\057" +
    "\047\051\050\071\057\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\012\047\013\063\014\065\015\074\022" +
    "\u0135\026\u013c\027\u013d\034\076\040\073\045\057\047\051" +
    "\050\071\057\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\005\u013a\006\347\007\322\010\313\011\335" +
    "\016\355\017\316\020\350\021\315\023\342\024\353\025" +
    "\351\033\344\035\324\037\343\041\323\043\333\044\331" +
    "\046\330\047\346\050\334\051\314\057\352\061\320\064" +
    "\345\001\001\000\062\006\361\007\322\010\313\011\335" +
    "\016\355\017\316\020\350\021\315\023\342\024\353\025" +
    "\351\033\344\035\324\037\343\041\323\043\333\044\331" +
    "\046\330\047\346\050\334\051\314\057\352\061\320\064" +
    "\345\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\005\u0140\006\347\007" +
    "\322\010\313\011\335\016\355\017\316\020\350\021\315" +
    "\023\342\024\353\025\351\033\344\035\324\037\343\041" +
    "\323\043\333\044\331\046\330\047\346\050\334\051\314" +
    "\057\352\061\320\064\345\001\001\000\062\006\361\007" +
    "\322\010\313\011\335\016\355\017\316\020\350\021\315" +
    "\023\342\024\353\025\351\033\344\035\324\037\343\041" +
    "\323\043\333\044\331\046\330\047\346\050\334\051\314" +
    "\057\352\061\320\064\345\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\u0146\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\012\047\013" +
    "\063\014\065\015\074\022\u0148\034\076\040\073\045\057" +
    "\047\051\050\071\057\075\001\001\000\002\001\001\000" +
    "\004\011\u014a\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\005\u014d\006\347\007\322\010\313\011\335\016" +
    "\355\017\316\020\350\021\315\023\342\024\353\025\351" +
    "\033\344\035\324\037\343\041\323\043\333\044\331\046" +
    "\330\047\346\050\334\051\314\057\352\061\320\064\345" +
    "\001\001\000\062\006\361\007\322\010\313\011\335\016" +
    "\355\017\316\020\350\021\315\023\342\024\353\025\351" +
    "\033\344\035\324\037\343\041\323\043\333\044\331\046" +
    "\330\047\346\050\334\051\314\057\352\061\320\064\345" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\012\047" +
    "\013\063\014\065\015\074\022\u0154\034\076\040\073\045" +
    "\057\047\051\050\071\057\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\005\u015b\006\347" +
    "\007\322\010\313\011\335\016\355\017\316\020\350\021" +
    "\315\023\342\024\353\025\351\033\344\035\324\037\343" +
    "\041\323\043\333\044\331\046\330\047\346\050\334\051" +
    "\314\057\352\061\320\064\345\001\001\000\062\006\361" +
    "\007\322\010\313\011\335\016\355\017\316\020\350\021" +
    "\315\023\342\024\353\025\351\033\344\035\324\037\343" +
    "\041\323\043\333\044\331\046\330\047\346\050\334\051" +
    "\314\057\352\061\320\064\345\001\001\000\002\001\001" +
    "\000\004\032\u015e\001\001\000\002\001\001\000\030\012" +
    "\047\013\063\014\065\015\074\022\u0160\034\076\040\073" +
    "\045\057\047\051\050\071\057\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String resultado = ""; //comentario para ver

    Lexico s;
    Sintactico(Lexico s){this.s = s;}

    public LinkedList<Errores> erroresSintacticos = new LinkedList<>();
    
    // Manejo de errores sintácticos recuperables.
    public void syntax_error(Symbol s){
        System.err.println("Error sintactico RECUPERABLE: " + s.value + " - Fila: " + s.right + " - Columna: " + s.left);
    
        erroresSintacticos.add(new Errores("sintactico RECUPERABLE",
                "No se esperaba el componente "+s.value,
                s.left,
                s.right));

    }

    // Manejo de errores sintácticos no recuperables.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error sintactico NO RECUPERABLE: " + s.value + " - Fila: " + s.right + " - Columna: " + s.left);

        erroresSintacticos.add(new Errores("Sintactico NO RECUPERABLE",
            "No se esperaba el componente "+s.value,
            s.left,
            s.right));

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {

 
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= _inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // _inicio ::= _declaracionesGlobales 
            {
              LinkedList<Instruccion> RESULT =null;
		int globalleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int globalright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> global = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = global; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_inicio",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // _declaracionesGlobales ::= _declaracionesGlobales _declaracionG 
            {
              LinkedList<Instruccion> RESULT =null;
		int globalleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int globalright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> global = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion dg = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = global; RESULT.add(dg); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_declaracionesGlobales",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // _declaracionesGlobales ::= _declaracionG 
            {
              LinkedList<Instruccion> RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion dg = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.add(dg); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_declaracionesGlobales",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // _declaracionG ::= _run SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_declaracionG",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // _declaracionG ::= _metodo 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_declaracionG",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // _declaracionG ::= _declaracion SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_declaracionG",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // _declaracionG ::= _declaracionV1 SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_declaracionG",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // _declaracionG ::= _declaracionV2 SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_declaracionG",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // _declaracionG ::= _asignacionV2 SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_declaracionG",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // _declaracionG ::= _struct SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_declaracionG",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // _declaracionG ::= _declaracionLista SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_declaracionG",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // _instrucciones ::= _instrucciones _instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int listInstrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listInstrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> listInstr = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nuevaInstrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nuevaInstrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion nuevaInstr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = listInstr; RESULT.add(nuevaInstr); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // _instrucciones ::= _instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion instr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.add(instr); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // _instruccion ::= _impresion SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // _instruccion ::= _declaracion SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // _instruccion ::= _asignacion SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // _instruccion ::= _stcIf 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // _instruccion ::= _stcMatch 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // _instruccion ::= _cFor 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // _instruccion ::= _cWhile 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // _instruccion ::= _cDoWhile SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // _instruccion ::= _break SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // _instruccion ::= _continuar SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // _instruccion ::= _declaracionV1 SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // _instruccion ::= _asignacionV1 SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // _instruccion ::= _declaracionV2 SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // _instruccion ::= _asignacionV2 SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // _instruccion ::= _declaracionLista SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // _instruccion ::= _appendLista SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // _instruccion ::= _asignacionLista SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // _instruccion ::= _removeLista SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // _instruccion ::= _popLista SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // _instruccion ::= _reverseLista SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // _instruccion ::= _struct SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // _instruccion ::= _llamada SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // _instruccion ::= _return SEMICOLON 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // _instruccion ::= error SEMICOLON 
            {
              Instruccion RESULT =null;
		 RESULT = null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // _impresion ::= IMPRIMIR LPAREN _expresion RPAREN 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Imprimir(expr, exprleft, exprright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_impresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // _declaracion ::= MUTB ID COLON _tipos 
            {
              Instruccion RESULT =null;
		int mtbleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int mtbright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String mtb = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion(mtb, id, t, tleft, tright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_declaracion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // _declaracion ::= MUTB ID COLON _tipos IGUAL _expresion 
            {
              Instruccion RESULT =null;
		int mtbleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int mtbright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String mtb = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion(mtb, id, expr, t, mtbleft, mtbright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_declaracion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // _asignacion ::= ID IGUAL _expresion 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AsignacionVar(id, expr, idleft, idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_asignacion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // _asignacion ::= ID INCREMENTO 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Incremento(id, idleft, idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_asignacion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // _asignacion ::= ID DECREMENTO 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Decremento(id, idleft, idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_asignacion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // _castear ::= CAST LPAREN _expresion AS _tipos RPAREN 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Casteo(expr, t, exprleft, exprright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_castear",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // _round ::= ROUND LPAREN _expresion RPAREN 
            {
              Instruccion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Round(expr, rleft, rright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_round",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // _length ::= LENGTH LPAREN _expresion RPAREN 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Length_func(expr, lleft, lright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_length",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // _length ::= LENGTH LPAREN ID LBRACE _expresion RBRACE RPAREN 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Length_func(id, i, lleft, lright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_length",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // _toString ::= toSTRING LPAREN _expresion RPAREN 
            {
              Instruccion RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object ts = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new ToString_func(expr, tsleft, tsright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_toString",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // _stcIf ::= IF LPAREN _expresion RPAREN LBRACE _instrucciones RBRACE 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> instr = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new If_stcControl(expr, instr, exprleft, exprright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_stcIf",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // _stcIf ::= IF LPAREN _expresion RPAREN LBRACE _instrucciones RBRACE ELSE LBRACE _instrucciones RBRACE 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> instr = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int instr2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int instr2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> instr2 = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new IfElse_stcControl(expr, instr, instr2, exprleft, exprright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_stcIf",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // _stcIf ::= IF LPAREN _expresion RPAREN LBRACE _instrucciones RBRACE ELSE _stcIf 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Instruccion> instr = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int elseIfleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int elseIfright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion elseIf = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ElseIf_stcControl(expr,instr, elseIf, null,exprleft, exprright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_stcIf",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // _cFor ::= FOR LPAREN _asignacion SEMICOLON _expresion SEMICOLON _asignacion RPAREN LBRACE _instrucciones RBRACE 
            {
              Instruccion RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Instruccion asig = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instruccion act = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> instr = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new For_ciclos(asig, expr, act, instr, asigleft, asigright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_cFor",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // _cWhile ::= WHILE LPAREN _expresion RPAREN LBRACE _instrucciones RBRACE 
            {
              Instruccion RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instruccion cond = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> instr = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new While_ciclos(cond, instr, condleft, condright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_cWhile",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // _cDoWhile ::= DO LBRACE _instrucciones RBRACE WHILE LPAREN _expresion RPAREN 
            {
              Instruccion RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> instr = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion cond = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new DoWhile_ciclos(cond, instr, condleft, condright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_cDoWhile",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // _stcMatch ::= MATCH LPAREN _expresion RPAREN LBRACE _casos RBRACE 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Caso> c = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Match_stc(exp, c, expleft, expright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_stcMatch",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // _stcMatch ::= MATCH LPAREN _expresion RPAREN LBRACE RBRACE 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 RESULT = new Match_stc(exp, new LinkedList<>(), expleft, expright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_stcMatch",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // _casos ::= _listCasos 
            {
              LinkedList<Caso> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_casos",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // _casos ::= _listCasos _casoDefecto 
            {
              LinkedList<Caso> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_casos",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // _casos ::= _casoDefecto 
            {
              LinkedList<Caso> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_casos",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // _listCasos ::= _listCasos _casoIndv 
            {
              LinkedList<Caso> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_listCasos",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // _listCasos ::= _casoIndv 
            {
              LinkedList<Caso> RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_listCasos",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // _casoIndv ::= _expresion ARROW LBRACE _instrucciones RBRACE 
            {
              Instruccion RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instruccion cond = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> instr = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Caso(cond, instr, condleft, condright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_casoIndv",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // _casoDefecto ::= DEFAULT ARROW LBRACE _instrucciones RBRACE 
            {
              Instruccion RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> instr = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Caso(null, instr,instrleft, instrright ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_casoDefecto",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // _declaracionV1 ::= MUTB ID COLON _tipos LCORCH RCORCH 
            {
              Instruccion RESULT =null;
		int mtbleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int mtbright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String mtb = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new DeclaracionV1(mtb, id, t, mtbleft, mtbright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_declaracionV1",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // _declaracionV1 ::= MUTB ID COLON _tipos LCORCH RCORCH IGUAL LCORCH _valoresVector1 RCORCH 
            {
              Instruccion RESULT =null;
		int mtbleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int mtbright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String mtb = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> expr = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new DeclaracionV1(mtb, id, expr, t, mtbleft, mtbright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_declaracionV1",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // _declaracionV2 ::= MUTB ID COLON _tipos LCORCH RCORCH LCORCH RCORCH 
            {
              Instruccion RESULT =null;
		int mtbleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int mtbright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String mtb = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 RESULT = new DeclaracionV2(mtb, id, t, mtbleft, mtbright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_declaracionV2",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // _declaracionV2 ::= MUTB ID COLON _tipos LCORCH RCORCH LCORCH RCORCH IGUAL LCORCH _listListasV RCORCH 
            {
              Instruccion RESULT =null;
		int mtbleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int mtbright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		String mtb = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int listVleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listVright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<LinkedList<Instruccion>> listV = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new DeclaracionV2(mtb, id, listV, t, mtbleft, mtbright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_declaracionV2",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // _listListasV ::= _listListasV COMMA LCORCH _valoresVector1 RCORCH 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int listListaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int listListaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<LinkedList<Instruccion>> listLista = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int listValoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listValoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> listValores = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 listLista.add(listValores); RESULT = listLista; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_listListasV",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // _listListasV ::= LCORCH _valoresVector1 RCORCH 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int listValoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listValoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> listValores = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new LinkedList<LinkedList<Instruccion>>(); RESULT.add(listValores); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_listListasV",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // _valoresVector1 ::= _valoresVector1 COMMA _expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int listValoresleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listValoresright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> listValores = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion valor = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 listValores.add(valor);  RESULT = listValores; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_valoresVector1",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // _valoresVector1 ::= _expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion valor = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.add(valor); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_valoresVector1",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // _accesoV ::= ID LCORCH _expresion RCORCH 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int ubileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int ubiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion ubi = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new AccesoV1(id, ubi, idleft, idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_accesoV",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // _asignacionV1 ::= ID LCORCH _expresion RCORCH IGUAL _expresion 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AsignacionV1(id, i, expr, idleft, idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_asignacionV1",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // _accesoV2 ::= ID LCORCH _expresion RCORCH LCORCH _expresion RCORCH 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion j = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new AccesoV2(id, i, j, idleft, idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_accesoV2",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // _asignacionV2 ::= ID LCORCH _expresion RCORCH LCORCH _expresion RCORCH IGUAL _expresion 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Instruccion j = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AsignacionV2(id, i, j, expr, idleft, idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_asignacionV2",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // _declaracionLista ::= MUTB ID COLON LISTA MENOR _tipos MAYOR 
            {
              Instruccion RESULT =null;
		int mtbleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int mtbright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String mtb = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new DeclaracionLista(id, mtb, t, mtbleft, mtbright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_declaracionLista",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // _appendLista ::= ID DOT APPEND LPAREN _expresion RPAREN 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new AppendList(id, expr, idleft, idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_appendLista",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // _accesoLista ::= ID DOT GETLIST LPAREN _expresion RPAREN 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new AccesoLista(id, i, idleft, idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_accesoLista",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // _asignacionLista ::= ID DOT SETLIST LPAREN _expresion COMMA _expresion RPAREN 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion valor = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new AsignacionLista(id, i, valor, idleft, idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_asignacionLista",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // _removeLista ::= ID DOT REMVLIST LPAREN _expresion RPAREN 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new RemoveLista(id, i, idleft, idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_removeLista",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // _popLista ::= ID DOT POPLIST LPAREN RPAREN 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 RESULT = new PopListas(id, idleft, idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_popLista",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // _reverseLista ::= ID DOT REVERSELIST LPAREN RPAREN 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 RESULT = new ReverseLista(id, idleft, idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_reverseLista",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // _struct ::= STRUCT ID LBRACE _listAtributos RBRACE 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int listAtleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listAtright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<HashMap> listAt = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new DeclaracionStructs(id, listAt, idleft, idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_struct",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // _listAtributos ::= _listAtributos _atributoSTR 
            {
              LinkedList<HashMap> RESULT =null;
		int listAtleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listAtright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<HashMap> listAt = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int atrbleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int atrbright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		HashMap<String,Object> atrb = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = listAt; RESULT.add(atrb); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_listAtributos",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // _listAtributos ::= _atributoSTR 
            {
              LinkedList<HashMap> RESULT =null;
		int atrbleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int atrbright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		HashMap<String,Object> atrb = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<HashMap>(); RESULT.add(atrb); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_listAtributos",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // _atributoSTR ::= ID COLON _tipos SEMICOLON 
            {
              HashMap<String,Object> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new HashMap<String,Object>(); 
                                                       RESULT.put("id", id); 
                                                       RESULT.put("tipo", t); 
                                                       RESULT.put("valor", null); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_atributoSTR",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // _atributoSTR ::= ID COLON ID SEMICOLON 
            {
              HashMap<String,Object> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new HashMap<String,Object>(); 
                                                       RESULT.put("id", id); 
                                                       RESULT.put("tipo", id2); 
                                                       RESULT.put("valor", null); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_atributoSTR",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // _break ::= BREAKK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Break_stc(aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_break",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // _continuar ::= CONTINUAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Continuar(aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_continuar",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // _return ::= RETURNSTC _expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Return_stc(expr, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_return",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // _return ::= RETURNSTC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Return_stc(null, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_return",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // _metodo ::= _tipos ID LPAREN _parametros RPAREN LBRACE _instrucciones RBRACE 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<HashMap> ps = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> instr = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Metodo(id, ps, instr, t, tleft, tright ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_metodo",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // _metodo ::= _tipos ID LPAREN RPAREN LBRACE _instrucciones RBRACE 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> instr = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Metodo(id, new LinkedList<HashMap>(), instr, t, tleft, tright ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_metodo",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // _parametros ::= _parametros COMMA _parametro 
            {
              LinkedList<HashMap> RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<HashMap> ps = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		HashMap<String,Object> p = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT =  ps; 
                                                     RESULT.add(p); 
                                                  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_parametros",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // _parametros ::= _parametro 
            {
              LinkedList<HashMap> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		HashMap<String,Object> p = (HashMap<String,Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT =  new LinkedList <HashMap>(); 
                                                     RESULT.add(p); 
                                                  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_parametros",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // _parametro ::= ID COLON _tipos IGUAL _expresion 
            {
              HashMap<String,Object> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 var hm2 = new HashMap<String, Object>();
                                                           hm2.put("tipo", t);
                                                           hm2.put("id", id); 
                                                           hm2.put("expresion", expr); 
                                                           RESULT = hm2; 
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_parametro",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // _parametro ::= ID COLON _tipos 
            {
              HashMap<String,Object> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 var hm = new HashMap<String, Object>();
                                                           hm.put("tipo", t);
                                                           hm.put("id", id); 
                                                           hm.put("expresion", null);
                                                           RESULT = hm; 
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_parametro",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // _run ::= MMMAIN ID LPAREN _parametrosLlamada RPAREN 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int psllleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int psllright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<HashMap> psll = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Run_Main(id, psll, idleft, idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_run",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // _run ::= MMMAIN ID LPAREN RPAREN 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Run_Main(id, new LinkedList<HashMap>(), idleft, idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_run",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // _parametrosLlamada ::= _parametrosLlamada COMMA ID IGUAL _expresion 
            {
              LinkedList<HashMap> RESULT =null;
		int psllleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int psllright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<HashMap> psll = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 var hm2 = new HashMap<String,Object>();
                                                                                      hm2.put("id",id);
                                                                                      hm2.put("expresion",expr);
                                                                                      RESULT = psll;
                                                                                      RESULT.add(hm2); 
                                                                                   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_parametrosLlamada",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // _parametrosLlamada ::= ID IGUAL _expresion 
            {
              LinkedList<HashMap> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		var hm = new HashMap<String,Object>();
                                                        hm.put("id",id);
                                                        hm.put("expresion",expr);
                                                        RESULT = new LinkedList<HashMap>();
                                                        RESULT.add(hm);
                                                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_parametrosLlamada",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // _llamada ::= ID LPAREN _parametrosLlamada RPAREN 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int psllleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int psllright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<HashMap> psll = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Llamada(id, psll, idleft, idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_llamada",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // _llamada ::= ID LPAREN RPAREN 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Llamada(id, new LinkedList<HashMap>(), idleft, idright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_llamada",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // _expresion ::= MENOS _expresion 
            {
              Instruccion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion valor = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new NegacionUnaria(valor, valorleft, valorright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // _expresion ::= _expresion POTENCIA _expresion 
            {
              Instruccion RESULT =null;
		int baseleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion base = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion exp = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Potencia(base, exp, baseleft, baseright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // _expresion ::= _expresion RAIZ _expresion 
            {
              Instruccion RESULT =null;
		int radicleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int radicright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion radic = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion indice = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Raiz(radic, indice, radicleft, radicright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // _expresion ::= _expresion MULTI _expresion 
            {
              Instruccion RESULT =null;
		int mult1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int mult1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion mult1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int mult2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mult2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion mult2 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Multiplicacion(mult1, mult2, mult1left, mult1right); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // _expresion ::= _expresion DIV _expresion 
            {
              Instruccion RESULT =null;
		int div1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int div1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion div1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int div2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int div2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion div2 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Division(div1, div2, div1left, div1right); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // _expresion ::= _expresion MODULO _expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int div2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int div2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion div2 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Modulo(a, div2, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // _expresion ::= _expresion MAS _expresion 
            {
              Instruccion RESULT =null;
		int sum1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sum1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion sum1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sum2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sum2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion sum2 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Suma (sum1, sum2, sum1left, sum1right); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // _expresion ::= _expresion MENOS _expresion 
            {
              Instruccion RESULT =null;
		int res1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int res1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion res1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int res2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int res2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion res2 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Resta(res1, res2, res1left, res1right); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // _expresion ::= _expresion EQUALS _expresion 
            {
              Instruccion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion exp1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion exp2 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Equals(exp1, exp2, exp1left, exp1right); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // _expresion ::= _expresion DIFERN _expresion 
            {
              Instruccion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion exp1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion exp2 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Diferencia(exp1, exp2, exp1left, exp1right); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // _expresion ::= _expresion MENOR _expresion 
            {
              Instruccion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion exp1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion exp2 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Menor(exp1, exp2, exp1left, exp1right); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // _expresion ::= _expresion MAYOR _expresion 
            {
              Instruccion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion exp1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion exp2 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Mayor(exp1, exp2, exp1left, exp1right); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // _expresion ::= _expresion MENIGUAL _expresion 
            {
              Instruccion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion exp1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion exp2 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MenorIgual(exp1, exp2, exp1left, exp1right); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // _expresion ::= _expresion MAYIGUAL _expresion 
            {
              Instruccion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion exp1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion exp2 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MayorIgual(exp1, exp2, exp1left, exp1right); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // _expresion ::= NOT _expresion 
            {
              Instruccion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion exp1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new NOT_logico(exp1, exp1left, exp1right); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // _expresion ::= _expresion AND _expresion 
            {
              Instruccion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion exp1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion exp2 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AND_logico(exp1, exp2, exp1left, exp1right); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // _expresion ::= _expresion OR _expresion 
            {
              Instruccion RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion exp1 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion exp2 = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new OR_logico(exp1, exp2, exp1left, exp1right); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // _expresion ::= ENTERO 
            {
              Instruccion RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(entero), new Tipo(tipoDato.ENTERO), enteroleft, enteroright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // _expresion ::= CADENA 
            {
              Instruccion RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(cadena, new Tipo(tipoDato.CADENA), cadenaleft, cadenaright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // _expresion ::= CARACTER 
            {
              Instruccion RESULT =null;
		int chaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int charight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cha = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(cha, new Tipo(tipoDato.CARACTER), chaleft, charight); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // _expresion ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String decimal = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(new Double(decimal), new Tipo(tipoDato.DECIMAL), decimalleft, decimalright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // _expresion ::= TRUE 
            {
              Instruccion RESULT =null;
		int verdleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int verdright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object verd = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(verd, new Tipo(tipoDato.BOOLEANO), verdleft, verdright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // _expresion ::= FALSE 
            {
              Instruccion RESULT =null;
		int falleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int falright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object fal = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(fal, new Tipo(tipoDato.BOOLEANO), falleft, falright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // _expresion ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AccesoVar(a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // _expresion ::= _accesoV 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // _expresion ::= _accesoV2 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // _expresion ::= _accesoLista 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // _expresion ::= _removeLista 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // _expresion ::= _popLista 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // _expresion ::= _llamada 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // _expresion ::= _castear 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // _expresion ::= _round 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // _expresion ::= _length 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // _expresion ::= _toString 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // _expresion ::= LPAREN _expresion RPAREN 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion expr = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = expr; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_expresion",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // _tipos ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO);   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_tipos",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // _tipos ::= DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_tipos",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // _tipos ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.BOOLEANO); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_tipos",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // _tipos ::= CHARV 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_tipos",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // _tipos ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA);   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_tipos",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // _tipos ::= METODO 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.VOID);     
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("_tipos",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
